#include "WPILib.h"

class Robot: public IterativeRobot
{

public:

	Joystick *leftJoy, *rightJoy, *controller;
	CANTalon *driveTrainR1, *driveTrainR2, *driveTrainR3, *driveTrainL1, *driveTrainL2, *driveTrainL3;
	CANTalon *ArmLift1, *ArmLift2, *RExt1, *RExt2,*LExt1, *LExt2;
	int auton = 0;
	int autonMax = 5;
Robot()
{
	//x-box
	controller = new Joystick(0);
	//sticks
	rightJoy = new Joystick(1);
	leftJoy = new Joystick(2);

	//Right Drive Train
	driveTrainR1 = new CANTalon(1);
	driveTrainR2 = new CANTalon(2);
	driveTrainR3 = new CANTalon(3);

	//Left Drive Train
	driveTrainL1 = new CANTalon(4);
	driveTrainL2 = new CANTalon(5);
	driveTrainL3 = new CANTalon(6);

	//bar lift, not likely to be used on bot
	RExt1 = new CANTalon(7);
	RExt2 = new CANTalon(8);
	LExt1 = new CANTalon(9);
	LExt2 = new CANTalon(10);

	//Finger
	ArmLift1 = new CANTalon(11);
	ArmLift2 = new CANTalon(12);
}
void RobotInit()
{

}
void DisabledPeriodic()
{
	SmartDashboard::PutString("DB/String 7","");


	if(controller->GetRawButton(6))
	{
		auton++;
		Wait(.2);
		if(auton == autonMax + 1)
		{
			auton = 0;
		}
		else if(auton == -1)
		{
			auton = 5;
		}
	}

	else if(controller->GetRawButton(5))
	{
		auton--;
		Wait(.2);
		if(auton == autonMax + 1)
		{
			auton = 0;
		}
		else if(auton == -1)
		{
			auton = 5;
		}
	}

	auto str = std::to_string(auton);
	SmartDashboard::PutString("DB/String 5","Auton mode: " +  str);


	if(auton == 0)
	{
		SmartDashboard::PutString("DB/String 6","GOTTA GO FAST(drive forward 7 seconds .75 power");
	}

	else if(auton == 1)
	{
		SmartDashboard::PutString("DB/String 6","OPEN THE BLAST DOORS");
	}

	else if(auton == 2)
	{
		SmartDashboard::PutString("DB/String 6","RIP SALLY");
	}

	else if(auton == 3)
	{
		SmartDashboard::PutString("DB/String 6","ROCKWALL");
	}
	else if(auton == 4)
	{
		SmartDashboard::PutString("DB/String 6","lowbar");

	}
	else if (auton == 5)
	{

	}

}

void AutonomousInit()
{
	if(auton == 0)
	{
		driveTrainR1->Set(.75);
		driveTrainR2->Set(.75);
		driveTrainR3->Set(.75);
		driveTrainL1->Set(-.75);
		driveTrainL2->Set(-.75);
		driveTrainL3->Set(-.75);

		Wait(7);

		driveTrainR1->Set(0);
		driveTrainR2->Set(0);
		driveTrainR3->Set(0);
		driveTrainL1->Set(0);
		driveTrainL2->Set(0);
		driveTrainL3->Set(0);
	}

	else if(auton == 1)
	{
		RExt1->Set(1);
		RExt2->Set(1);
		LExt1->Set(-1);
		LExt2->Set(-1);

		Wait(1);

		RExt1->Set(0);
		RExt2->Set(0);
		LExt1->Set(0);
		LExt2->Set(0);
		//RArm1->Set(1);
		ArmLift1->Set(1);
		ArmLift2->Set(-1);

		Wait(1);

		//RArm1->Set(0);
		ArmLift1->Set(0);
		ArmLift2->Set(0);
		driveTrainR1->Set(1);
		driveTrainR2->Set(1);
		driveTrainR3->Set(1);
		driveTrainR1->Set(-1);
		driveTrainR2->Set(-1);
		driveTrainR3->Set(-1);

		Wait(1.5);

		driveTrainR1->Set(0);
		driveTrainR2->Set(0);
		driveTrainR3->Set(0);
		driveTrainR1->Set(0);
		driveTrainR2->Set(0);
		driveTrainR3->Set(0);
	}

	else if(auton == 2)
	{
		ArmLift1->Set(1);
		ArmLift2->Set(-1);

		Wait(1);

		ArmLift1->Set(0);
		ArmLift2->Set(0);
		RExt1->Set(1);
		RExt2->Set(1);
		LExt1->Set(-1);
		LExt2->Set(-1);

		Wait(1);

		RExt1->Set(0);
		RExt2->Set(0);
		LExt1->Set(0);
		LExt2->Set(0);
		driveTrainR1->Set(1);
		driveTrainR2->Set(1);
		driveTrainR3->Set(1);
		driveTrainR1->Set(1);
		driveTrainR2->Set(1);
		driveTrainR3->Set(1);
		ArmLift1->Set(-1);
		ArmLift1->Set(1);

		Wait(1);

		RExt1->Set(-1);
		RExt2->Set(-1);

		Wait(1);

		RExt1->Set(0);
		RExt2->Set(0);
		LExt1->Set(0);
		LExt2->Set(0);
		driveTrainR1->Set(1);
		driveTrainR2->Set(1);
		driveTrainR3->Set(1);
		driveTrainL1->Set(1);
		driveTrainL2->Set(1);
		driveTrainL3->Set(1);

		Wait(1);

		driveTrainR1->Set(0);
		driveTrainR2->Set(0);
		driveTrainR3->Set(0);
		driveTrainL1->Set(0);
		driveTrainL2->Set(0);
		driveTrainL3->Set(0);
	}
	else if(auton == 3)
	{
		ArmLift1->Set(.2);
		Wait(2);
		driveTrainR1->Set(.5);
		driveTrainR2->Set(.5);
		driveTrainR3->Set(.5);
		driveTrainL1->Set(.5);
		driveTrainL2->Set(.5);
		driveTrainL3->Set(.5);
		Wait(4);
		driveTrainR1->Set(0);
		driveTrainR2->Set(0);
		driveTrainR3->Set(0);
		driveTrainL1->Set(0);
		driveTrainL2->Set(0);
		driveTrainL3->Set(0);
	}
	else if(auton == 4)
	{
		ArmLift1->Set(.75);
		ArmLift2->Set(-.75);
		Wait(.1);
		ArmLift1->Set(0);
		ArmLift2->Set(0);
		driveTrainL1->Set(.5);
		driveTrainL2->Set(.5);
		driveTrainL3->Set(.5);
		driveTrainR1->Set(.5);
		driveTrainR2->Set(.5);
		driveTrainR3->Set(.5);
		Wait(5);
		driveTrainL1->Set(0);
		driveTrainL2->Set(0);
		driveTrainL3->Set(0);
		driveTrainR1->Set(0);
		driveTrainR2->Set(0);
		driveTrainR3->Set(0);
	}
	else
	{

	}

}
void TeleopInit()
{

}

void TeleopPeriodic()
{
	//y = outward
	//x = inward
	TankDrive(controller->GetRawAxis(5), controller->GetRawAxis(1));

	/*
	if(controller->GetRawAxis(5) < -.3)
	{
		ArmLift1->Set(1);
		ArmLift2->Set(-1);
	}
	else if(controller->GetRawAxis(5) > .3)
	{
		ArmLift1->Set(-1);
		ArmLift2->Set(1);
	}
	else
	{
		ArmLift1->Set(0);
		ArmLift2->Set(0);
	}

	if(controller->GetRawAxis(1) > .3)
	{
		SmartDashboard::PutString("DB/String 8","power set 1");
		RExt1->Set(1);
		RExt2->Set(-1);
		LExt1->Set(-1);
		LExt2->Set(-1);
	}
	else if(controller->GetRawAxis(1) < -.3)
	{
		SmartDashboard::PutString("DB/String 8","power set -1");
		RExt1->Set(1);
		RExt2->Set(1);
		LExt1->Set(1);
		LExt2->Set(1);
	}
	else
	{
		SmartDashboard::PutString("DB/String 8","power set 0");
		RExt1->Set(0);
		RExt2->Set(0);
		LExt1->Set(0);
		LExt2->Set(0);
	}


	if(controller->GetRawButton(5))
	{
		SmartDashboard::PutString("DB/String 7","BEAM ME UP SCOTTY");
		ArmLift1->Set(1);
		Wait(2);
		ArmLift1->Set(0);

		driveTrainL1->Set(1);
		driveTrainL2->Set(1);
		driveTrainL3->Set(1);
		driveTrainR1->Set(-1);
		driveTrainR2->Set(-1);
		driveTrainR3->Set(-1);
		Wait(.5);
		driveTrainL1->Set(0);
		driveTrainL2->Set(0);
		driveTrainL3->Set(0);
		driveTrainR1->Set(0);
		driveTrainR2->Set(0);
		driveTrainR3->Set(0);

		ArmLift1->Set(-1);
		Wait(2);
		ArmLift1->Set(0);
	}
*/
	if(controller->GetRawButton(3))
	{
		driveTrainR1->Set(1);
		driveTrainR2->Set(1);
		driveTrainR3->Set(1);
	}

	if(controller->GetRawButton(2))
	{
		driveTrainL1->Set(1);
		driveTrainL2->Set(1);
		driveTrainL3->Set(1);
	}

}
void TankDrive(double left, double right)
{
	driveTrainR1->Set(-left);
	driveTrainR2->Set(-left);
	driveTrainR3->Set(-left);

	driveTrainL1->Set(right);
	driveTrainL2->Set(right);
	driveTrainL3->Set(right);
}

};

START_ROBOT_CLASS(Robot)
